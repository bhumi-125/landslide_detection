

import panda as pd
import numpy as np
import h5py
import glob
import matplotlib.pyplot as plt
%matplotlib inline
import tensorflow as tf
import os

// dataset

from goolge.colab import drive
drive.mount("/content/gdrive")

os.chdir(r'/content/gdrive/myDrive/DL/landslide4ense')

path_single = r"data/img/image_2000.h5"
path_single_mask = r'data/mask/mask_2000.h5'


f_data = rp.zeroes((1, 128, 128, 3))
with hspy.file(path_single) as hdf
  ls = list(hdf.keys())
  print("ls",ls)
  data = np.array(hdf.get('img'))
  print("input data shape:",data.shape)
  plt.imshow(data[: , :, 3:0:-1])

  data_red = data[:, :, 3]
  data_green = data[: , : , 2]
  data_blue = data[: , : , 1]
  data_nir = data[: , : , 7]
  data_rgb = data[: , : , 3:0:-1]
  data_ndvi = np.divide(data_nir - data_red,np.add(data_nir, data_red))
  f_data[0, :, :, 0]= data_ndvi
  f_data[0, :, :, 1]= data[ :, :, 12]
  f_data[0, :, :, 2]= data[ :, :, 13]

  print("data ndvi shape " , data_ndvi.shape,"f_data shape:", f_data.shape)
  plt.imshow(data_ndvi)



with h5py.File(path_single_mask) as hdf:
  ls=list(hdf.keys())
  print("ls", ls)
  data = np.array(hdf.get('mask'))
  print("input data shape :" , data.shape)
  plt.imshow(data)


  path_single = r"data/img/image_10.h5"
  path_single_mask = r'data/mask/mask_1.h5'
  TRAIN_PATH = r"data/img/*.h5"
  TRAIN_MASK = r"data/img/*.h5"

  TRAIN_XX = np.zeros((3799,128, 128, 6))
  TRAIN_YY = np.zeros((3799,128,128,1))
  all_train =sorted(glob.glob(TRAIN_PATH))
  all_mask = sorted(glob.glob(TRAIN_MASK))


import tensorflow as tf
tf.test.gpu_device_name()


for i, (img, mask) in enumerate(zip(all_train, all_mask)):
  print(i,img,mask)
  with h5py.File(img) as hdf:
    ls=list(hdf.keys())
    data = np.array(hdf.get('img'))

    data[np.isnan(data)] = 0.000001

    mid_rgb = data[:,:,1:4].max()/2.0
    mid_slope = data[:,:,12].max()/2.0
    mid_elevation = data[:,:,13].max()/2.0

    data_red = data[:,:,3]
    data_nir = data[:,:,7]
    data_ndvi = np.divide(data_nir - data_red,np.add(data_nir, data_red))

    TRAIN_XX[i,:, :, 0]=1-data[:,:,3]/mid_rgb
    TRAIN_XX[i,:, :, 1]=1-data[:,:,2]/mid_rgb
    TRAIN_XX[i,:, :, 2]=1-data[:,:,1]/mid_rgb
    TRAIN_XX[i,:, :, 3]=data_ndvi
    TRAIN_XX[i,:, :, 4]=1-data[:,:,12]/mid_solve
    TRAIN_XX[i,:, :, 5]=1-data[:,:,13]/mid_elevation

  with h5.py.File(mask) as hdf:
    ls=list(hdf.keys())
    data=np.array(hdf.get('mask'))
    TRAIN_YY[i,:,:,0]=data


TRAIN_XX[np.isnan(TRAIN_XX)]=0.000001
print(TRAIN_XX.min(),TRAIN_XX.max(),TRAIN_YY.min(),TRAIN_YY.max())


def dice_loss(y_true, y_pred):
  y_true = tf.cast(y_true, tf.float32)
  y_pred = tf.math.sigmoid(y_pred)
  numerator = 2*tf.reduce_sum(y_true*y_pred)
  denominator = tf.reduce_sum(y_true + y_pred)
  return 1-numerator/denominator


img=234
fig(ax1,ax2,ax3,ax4,ax5)=plt.subplots(1,5,figsize=(15,10))

ax1.set_title("RGB image")
ax2.set_title("NDVI")
ax3.set_title("Slope")
ax4.set_title("Elevation")
ax5.set_title("Mask")
ax1.imshow(TRAIN_XX[img,:, :,0:3])
ax2.imshow(TRAIN_XX[img,:, :,3])
ax3.imshow(TRAIN_XX[img,:, :,4])
ax4.imshow(TRAIN_XX[img,:, :,5])
ax5.imshow(TRAIN_XX[img,:, :,0])



